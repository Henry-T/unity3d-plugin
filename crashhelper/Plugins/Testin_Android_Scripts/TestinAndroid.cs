// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Runtime.InteropServices;
using System.Diagnostics;

public static class TestinAndroid
{	
	static bool _ShowDebug = true;
	private static bool isInitialized = false;
	private static readonly string TESTINAGENT_CLASS = "com.testin.agent.TestinAgent";
	private static AndroidJavaClass mTestinPlugin = null;
	
	/// <summary>
	/// Description:
	/// Start TestinAgent for Unity, will start TestinAgent for android if it is not already active.
	/// Parameters:
	/// appkey: Testin Provided AppKey for this application
	/// </summary>
	public static void Init (string appkey)
	{
		if (Application.platform != RuntimePlatform.Android) {
			System.Console.Write ("TestinAgent only supports the Android platform. TestinAgent will not be enabled");
			return;
		}
		
		if (isInitialized) {
			System.Console.Write ("TestinAgent is already initialized.");
			return;
		}
		if (_ShowDebug) 
		{
			UnityEngine.Debug.Log ("Initializing TestinAgent with AppKey " + appkey);
		}
		
		AndroidJavaClass cls_UnityPlayer = new AndroidJavaClass ("com.unity3d.player.UnityPlayer");
		AndroidJavaObject objActivity = cls_UnityPlayer.GetStatic<AndroidJavaObject> ("currentActivity");
		
		mTestinPlugin = new AndroidJavaClass (TESTINAGENT_CLASS);
		if (mTestinPlugin == null) {
			System.Console.Write ("TestinAgent failed to initialize.  Unable to find class " + TESTINAGENT_CLASS);
			return;
		}
		
		mTestinPlugin.CallStatic ("init", objActivity, appkey);
		mTestinPlugin.CallStatic ("onResume", objActivity);
		
		System.AppDomain.CurrentDomain.UnhandledException += _OnUnresolvedExceptionHandler;
		Application.RegisterLogCallback (_OnDebugLogCallbackHandler);
		
		isInitialized = true;
		
	}
	
	static private void doLogError (System.Exception e)
	{
		if (!isInitialized) {
			return;
		}
		
		StackTrace stackTrace = new StackTrace (e, true);
		string[] classes = new string[stackTrace.FrameCount];
		string[] methods = new string[stackTrace.FrameCount];
		string[] files = new string[stackTrace.FrameCount];
		int[] lineNumbers = new int[stackTrace.FrameCount];

		String message = "";
		
		for (int i = 0; i < stackTrace.FrameCount; i++) {
			StackFrame frame = stackTrace.GetFrame (i);
			classes [i] = frame.GetMethod ().DeclaringType.Name;
			methods [i] = frame.GetMethod ().Name;
			files [i] = frame.GetFileName ();
			lineNumbers [i] = frame.GetFileLineNumber ();

			message += classes[i] + ".";
			message += methods[i] + "() (at ";
			message += files [i] + ":";
			message += lineNumbers[i] + ")";
		}

		mTestinPlugin.CallStatic ("reportCustomizedException", 1, e.GetType ().Name ,message);
		
	}
	
	static private void logCrash (System.Exception e)
	{
		doLogError (e);
	}

	static public void LogHandledException (System.Exception e)
	{
		doLogError (e);
	}

	static public void SetUserInfo (string userInfo)
	{
		if (!isInitialized) {
			return;
		}
		
		mTestinPlugin.CallStatic ("setUserInfo", userInfo);
	}
	
	static private void _OnUnresolvedExceptionHandler (object sender, System.UnhandledExceptionEventArgs args)
	{
		if (!isInitialized || args == null || args.ExceptionObject == null) {
			return;
		}
		
		if (args.ExceptionObject.GetType () != typeof(System.Exception)) {
			return;
		}
		
		logCrash ((System.Exception)args.ExceptionObject);
	}
	
	static private void _OnDebugLogCallbackHandler (string name, string stack, LogType type)
	{
		if (LogType.Assert != type && LogType.Exception != type) {
			return;
		}
		
		if (!isInitialized) {
			return;
		}
		
		try {
			mTestinPlugin.CallStatic ("reportCustomizedException", 1, name ,stack);
		} catch (System.Exception e) {
			System.Console.Write ("Unable to log a crash exception to TestinAgent to an unexpected error: " + e.ToString ());
		}
	}

}


